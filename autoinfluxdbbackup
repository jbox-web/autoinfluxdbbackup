#!/bin/bash

if [ -f /etc/default/autoinfluxdbbackup ] ; then
  . /etc/default/autoinfluxdbbackup
fi

##########
# PARAMS #
##########

# InfluxDB host
DBHOST=${DBHOST:-"localhost"}

# InfluxDB port
DBPORT=${DBPORT:-"8088"}

# InfluxDB databases
DBNAMES=${DBNAMES:-"()"}

# Backup directory location e.g /var/backups
BACKUPDIR=${BACKUPDIR:-"/var/backups/influxdb"}

# Mail setup
# What would you like to be mailed to you?
# - log   : send only log file
# - stdout : will simply output the log to the screen if run manually.
# - quiet : Only send logs if an error occurs to the MAILADDR.
MAILCONTENT=${MAILCONTENT:-"stdout"}

# Email Address to send mail to? (user@domain.com)
MAILADDR=${MAILADDR:-"user@domain.com"}

# Which day do you want weekly backups? (1 to 7 where 1 is Monday)
DOWEEKLY=${DOWEEKLY:-6}

#############
# FUNCTIONS #
#############

# Database dump function
dump_db () {
  local db=$1
  local dir=$2
  echo "Saving InfluxDB database : ${db}"
  influxd backup -portable -database ${db} -host ${DBHOST}:${DBPORT} ${dir}
  return 0
}

########
# MAIN #
########

PATH=/usr/local/bin:/usr/bin:/bin
HOST=$(hostname)               # Hostname
DATE=$(date +%Y-%m-%d_%Hh%Mm)  # Datestamp e.g 2002-09-21
DOW=$(date +%A)                # Day of the week e.g. Monday
DNOW=$(date +%u)               # Day number of the week 1 to 7 where 1 represents Monday
DOM=$(date +%d)                # Date of the Month e.g. 27
M=$(date +%B)                  # Month e.g January
W=$(date +%V)                  # Week Number e.g 37
VER=1.0                        # Version Number

LOGFILE=${BACKUPDIR}/influxdb-$(date +%N).log         # Logfile Name
LOGERR=${BACKUPDIR}/ERRORS_INFLUXDB-$(date +%N).log   # Logfile Name

# Create required directories
# Check Backup Directory exists.
if [ ! -e "${BACKUPDIR}" ]; then
  mkdir -p "${BACKUPDIR}"
fi

chmod o-x ${BACKUPDIR}
chmod o-r ${BACKUPDIR}

# Check Daily Directory exists.
if [ ! -e "${BACKUPDIR}/daily" ]; then
  mkdir -p "${BACKUPDIR}/daily"
fi

# Check Weekly Directory exists.
if [ ! -e "${BACKUPDIR}/weekly" ]; then
  mkdir -p "${BACKUPDIR}/weekly"
fi

# Check Monthly Directory exists.
if [ ! -e "${BACKUPDIR}/monthly" ]; then
  mkdir -p "${BACKUPDIR}/monthly"
fi

# IO redirection for logging.
touch ${LOGFILE}
exec 6>&1             # Link file descriptor #6 with stdout.
                      # Saves stdout.
exec > ${LOGFILE}     # stdout replaced with file ${LOGFILE}.
touch ${LOGERR}
exec 7>&2             # Link file descriptor #7 with stderr.
                      # Saves stderr.
exec 2> ${LOGERR}     # stderr replaced with file ${LOGERR}.

# Backup!
echo ======================================================================
echo AutoInfluxDBBackup VER ${VER}
echo https://github.com/jbox-web/autoinfluxdbbackup
echo
echo Backup of InfluxDB Server
echo ======================================================================

echo Backup Start $(date)
echo ======================================================================

# Monthly Full Backup of all Databases
if [ "${DOM}" = "01" ]; then
  for MDB in ${DBNAMES}; do
    # Check Monthly DB Directory exists.
    if [ ! -e "${BACKUPDIR}/monthly/${MDB}" ]; then
      mkdir -p "${BACKUPDIR}/monthly/${MDB}"
    fi

    echo "Monthly Backup of ${MDB}..."

    dump_db "${MDB}" "${BACKUPDIR}/monthly/${MDB}/${MDB}.${DATE}.${M}"
    echo ----------------------------------------------------------------------
  done
fi

for DB in ${DBNAMES}; do
  # Check Daily DB Directory exists.
  if [ ! -e "${BACKUPDIR}/daily/${DB}" ]; then
    mkdir -p "${BACKUPDIR}/daily/${DB}"
  fi

  # Check Weekly DB Directory exists.
  if [ ! -e "${BACKUPDIR}/weekly/${DB}" ]; then
    mkdir -p "${BACKUPDIR}/weekly/${DB}"
  fi

  # Weekly Backup
  if [ "${DNOW}" = "${DOWEEKLY}" ]; then
    echo "Weekly Backup of Database (${DB})"
    echo "Rotating 5 weeks Backups..."

    if [ "${W}" -le 05 ]; then
      REMW=$(expr 48 + ${W})
    elif [ "${W}" -lt 15 ]; then
      REMW=0$(expr ${W} - 5)
    else
      REMW=$(expr ${W} - 5)
    fi

    rm -rfv "${BACKUPDIR}/weekly/${DB}/week_${REMW}".*
    echo

    dump_db "${DB}" "${BACKUPDIR}/weekly/${DB}/week_${W}.${DATE}"
    echo ----------------------------------------------------------------------

  # Daily Backup
  else
    echo "Daily Backup of Database (${DB})"
    echo "Rotating last weeks Backup..."

    rm -rfv "${BACKUPDIR}/daily/${DB}"/*."${DOW}"
    echo

    dump_db "${DB}" "${BACKUPDIR}/daily/${DB}/${DATE}.${DOW}"
    echo ----------------------------------------------------------------------
  fi
done


echo Backup End Time $(date)
echo ======================================================================

echo Total disk space used for backup storage..
echo Size - Location
echo $(du -hs "${BACKUPDIR}")
echo
echo ======================================================================

# Clean up IO redirection
exec 1>&6 6>&-      # Restore stdout and close file descriptor #6.
exec 1>&7 7>&-      # Restore stdout and close file descriptor #7.

# Send mail report
if [ "$MAILCONTENT" = "log" ]; then
  cat "${LOGFILE}" | mail -s "InfluxDB Backup Log for ${HOST} - ${DATE}" ${MAILADDR}
  if [ -s "${LOGERR}" ]; then
    cat "${LOGERR}" | mail -s "ERRORS REPORTED: InfluxDB Backup error Log for ${HOST} - ${DATE}" ${MAILADDR}
  fi

elif [ "$MAILCONTENT" = "quiet" ]; then
  if [ -s "${LOGERR}" ]; then
    cat "${LOGERR}" | mail -s "ERRORS REPORTED: InfluxDB Backup error Log for ${HOST} - ${DATE}" ${MAILADDR}
    cat "${LOGFILE}" | mail -s "InfluxDB Backup Log for ${HOST} - ${DATE}" ${MAILADDR}
  fi

else
  if [ -s "${LOGERR}" ]; then
    cat "${LOGFILE}"
    echo
    echo "###### WARNING ######"
    echo "Errors reported during AutoInfluxDBBackup execution.. Backup failed"
    echo "Error log below.."
    cat "${LOGERR}"
  else
    cat "${LOGFILE}"
  fi
fi

# Compute exit status
if [ -s "${LOGERR}" ]; then
  STATUS=1
else
  STATUS=0
fi

# Clean up Logfile
rm -f "${LOGFILE}"
rm -f "${LOGERR}"

exit ${STATUS}
